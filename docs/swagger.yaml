definitions:
  auth.LoginDto:
    properties:
      mobile:
        type: string
      password:
        maxLength: 90
        minLength: 8
        type: string
    required:
    - mobile
    - password
    type: object
  auth.PasswordDto:
    properties:
      current_password:
        maxLength: 90
        minLength: 8
        type: string
      new_password:
        maxLength: 90
        minLength: 8
        type: string
    required:
    - current_password
    - new_password
    type: object
  auth.RefreshDto:
    properties:
      access_token:
        maxLength: 50
        minLength: 30
        type: string
      refresh_token:
        maxLength: 50
        minLength: 30
        type: string
    required:
    - access_token
    - refresh_token
    type: object
  auth.RegisterDto:
    properties:
      family:
        maxLength: 190
        minLength: 2
        type: string
      mobile:
        type: string
      name:
        maxLength: 190
        minLength: 2
        type: string
      password:
        maxLength: 90
        minLength: 8
        type: string
    required:
    - family
    - mobile
    - name
    - password
    type: object
  auth.Tokens:
    properties:
      access_token:
        type: string
      expires_at:
        type: string
      refresh_token:
        type: string
    type: object
  auth.TokensResponseType:
    properties:
      tokens:
        $ref: '#/definitions/auth.Tokens'
    type: object
  core.Response-auth_TokensResponseType:
    properties:
      data:
        $ref: '#/definitions/auth.TokensResponseType'
      errors:
        type: object
      message:
        type: string
    type: object
  core.Response-courses_CourseResponseType:
    properties:
      data:
        $ref: '#/definitions/courses.CourseResponseType'
      errors:
        type: object
      message:
        type: string
    type: object
  core.Response-courses_CoursesResponseType:
    properties:
      data:
        $ref: '#/definitions/courses.CoursesResponseType'
      errors:
        type: object
      message:
        type: string
    type: object
  core.Response-documents_DocumentResponseType:
    properties:
      data:
        $ref: '#/definitions/documents.DocumentResponseType'
      errors:
        type: object
      message:
        type: string
    type: object
  core.Response-documents_DocumentsResponseType:
    properties:
      data:
        $ref: '#/definitions/documents.DocumentsResponseType'
      errors:
        type: object
      message:
        type: string
    type: object
  core.Response-projects_ProjectResponseType:
    properties:
      data:
        $ref: '#/definitions/projects.ProjectResponseType'
      errors:
        type: object
      message:
        type: string
    type: object
  core.Response-projects_ProjectsResponseType:
    properties:
      data:
        $ref: '#/definitions/projects.ProjectsResponseType'
      errors:
        type: object
      message:
        type: string
    type: object
  core.Response-users_UserResponseType:
    properties:
      data:
        $ref: '#/definitions/users.UserResponseType'
      errors:
        type: object
      message:
        type: string
    type: object
  core.Response-users_UsersResponseType:
    properties:
      data:
        $ref: '#/definitions/users.UsersResponseType'
      errors:
        type: object
      message:
        type: string
    type: object
  core.SuccessResponse:
    properties:
      data:
        type: object
      errors:
        type: object
      message:
        type: string
    type: object
  courses.Course:
    properties:
      category:
        type: string
      description:
        type: string
      id:
        type: string
      status:
        type: string
      title:
        type: string
      user_id:
        type: string
    type: object
  courses.CourseCreateDto:
    properties:
      category:
        type: string
      description:
        type: string
      status:
        type: string
      title:
        maxLength: 250
        minLength: 2
        type: string
    required:
    - category
    - description
    - status
    - title
    type: object
  courses.CourseResponseType:
    properties:
      course:
        $ref: '#/definitions/courses.Course'
    type: object
  courses.CourseUpdateDto:
    properties:
      category:
        type: string
      description:
        type: string
      status:
        type: string
      title:
        maxLength: 250
        minLength: 2
        type: string
    required:
    - category
    - description
    - status
    - title
    type: object
  courses.CoursesResponseType:
    properties:
      courses:
        items:
          $ref: '#/definitions/courses.Course'
        type: array
    type: object
  documents.Document:
    properties:
      Category:
        type: string
      Description:
        type: string
      PublicationDate:
        type: string
      Ratings:
        type: integer
      id:
        type: string
      status:
        type: string
      title:
        type: string
      user_id:
        type: string
    type: object
  documents.DocumentCreateDto:
    properties:
      category:
        type: string
      description:
        type: string
      publicationDate:
        type: string
      ratings:
        maximum: 5
        minimum: 0
        type: integer
      status:
        type: string
      title:
        maxLength: 250
        minLength: 2
        type: string
    required:
    - category
    - description
    - publicationDate
    - status
    - title
    type: object
  documents.DocumentResponseType:
    properties:
      Document:
        $ref: '#/definitions/documents.Document'
    type: object
  documents.DocumentUpdateDto:
    properties:
      category:
        type: string
      description:
        type: string
      publicationDate:
        type: string
      ratings:
        maximum: 5
        minimum: 0
        type: integer
      status:
        type: string
      title:
        maxLength: 250
        minLength: 2
        type: string
    required:
    - category
    - description
    - publicationDate
    - status
    - title
    type: object
  documents.DocumentsResponseType:
    properties:
      documents:
        items:
          $ref: '#/definitions/documents.Document'
        type: array
    type: object
  projects.Project:
    properties:
      description:
        type: string
      id:
        type: string
      image_url:
        type: string
      link:
        type: string
      status:
        type: string
      title:
        type: string
      user_id:
        type: string
    type: object
  projects.ProjectCreateDto:
    properties:
      description:
        type: string
      image_url:
        maxLength: 250
        minLength: 10
        type: string
      link:
        type: string
      status:
        type: string
      title:
        maxLength: 250
        minLength: 2
        type: string
    required:
    - description
    - image_url
    - link
    - status
    - title
    type: object
  projects.ProjectResponseType:
    properties:
      project:
        $ref: '#/definitions/projects.Project'
    type: object
  projects.ProjectUpdateDto:
    properties:
      description:
        type: string
      image_url:
        maxLength: 250
        minLength: 10
        type: string
      link:
        type: string
      status:
        type: string
      title:
        maxLength: 250
        minLength: 2
        type: string
    required:
    - description
    - image_url
    - link
    - status
    - title
    type: object
  projects.ProjectsResponseType:
    properties:
      projects:
        items:
          $ref: '#/definitions/projects.Project'
        type: array
    type: object
  users.User:
    properties:
      created_at:
        type: string
      family:
        type: string
      id:
        type: string
      mobile:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  users.UserResponseType:
    properties:
      user:
        $ref: '#/definitions/users.User'
    type: object
  users.UsersResponseType:
    properties:
      users:
        items:
          $ref: '#/definitions/users.User'
        type: array
    type: object
info:
  contact: {}
paths:
  /api:
    get:
      responses: {}
      summary: app route, get heathy status
      tags:
      - App
  /api/v1/Documents:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Response-documents_DocumentsResponseType'
      security:
      - Bearer: []
      summary: get list of documents
      tags:
      - Documents
    post:
      consumes:
      - application/json
      parameters:
      - description: document inputs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/documents.DocumentCreateDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Response-documents_DocumentResponseType'
      security:
      - Bearer: []
      summary: create new document api
      tags:
      - Documents
  /api/v1/Documents/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Document ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.SuccessResponse'
      security:
      - Bearer: []
      summary: get document by id
      tags:
      - Documents
    put:
      consumes:
      - application/json
      parameters:
      - description: Document ID
        in: path
        name: id
        required: true
        type: string
      - description: document inputs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/documents.DocumentUpdateDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.SuccessResponse'
      security:
      - Bearer: []
      summary: update document by id
      tags:
      - Documents
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login inputs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.LoginDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Response-auth_TokensResponseType'
      summary: login api
      tags:
      - Auth
  /api/v1/auth/logout:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.SuccessResponse'
      security:
      - Bearer: []
      summary: logout user
      tags:
      - Auth
  /api/v1/auth/password:
    put:
      consumes:
      - application/json
      parameters:
      - description: Change password inputs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.PasswordDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.SuccessResponse'
      security:
      - Bearer: []
      summary: change logged in user password
      tags:
      - Auth
  /api/v1/auth/refresh:
    post:
      consumes:
      - application/json
      parameters:
      - description: Refresh tokens inputs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RefreshDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Response-auth_TokensResponseType'
      summary: refresh tokens api
      tags:
      - Auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Register inputs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.SuccessResponse'
      summary: register api
      tags:
      - Auth
  /api/v1/auth/user:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Response-users_UserResponseType'
      security:
      - Bearer: []
      summary: fetch logged in user info
      tags:
      - Auth
  /api/v1/courses:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Response-courses_CoursesResponseType'
      security:
      - Bearer: []
      summary: get list of courses
      tags:
      - Courses
    post:
      consumes:
      - application/json
      parameters:
      - description: Courses inputs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/courses.CourseCreateDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Response-courses_CourseResponseType'
      security:
      - Bearer: []
      summary: create new course api
      tags:
      - Courses
  /api/v1/courses/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Course ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.SuccessResponse'
      security:
      - Bearer: []
      summary: get Course by id
      tags:
      - Courses
    get:
      consumes:
      - application/json
      parameters:
      - description: Course ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Response-courses_CourseResponseType'
      security:
      - Bearer: []
      summary: get course by id
      tags:
      - Courses
    put:
      consumes:
      - application/json
      parameters:
      - description: Course ID
        in: path
        name: id
        required: true
        type: string
      - description: course inputs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/courses.CourseUpdateDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.SuccessResponse'
      security:
      - Bearer: []
      summary: update course by id
      tags:
      - Courses
  /api/v1/documents/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Document ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Response-documents_DocumentResponseType'
      security:
      - Bearer: []
      summary: get document by id
      tags:
      - Documents
  /api/v1/projects:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Response-projects_ProjectsResponseType'
      security:
      - Bearer: []
      summary: get list of projects
      tags:
      - Projects
    post:
      consumes:
      - application/json
      parameters:
      - description: project inputs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/projects.ProjectCreateDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Response-projects_ProjectResponseType'
      security:
      - Bearer: []
      summary: create new project api
      tags:
      - Projects
  /api/v1/projects/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.SuccessResponse'
      security:
      - Bearer: []
      summary: get project by id
      tags:
      - Projects
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Response-projects_ProjectResponseType'
      security:
      - Bearer: []
      summary: get project by id
      tags:
      - Projects
    put:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: project inputs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/projects.ProjectUpdateDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.SuccessResponse'
      security:
      - Bearer: []
      summary: update project by id
      tags:
      - Projects
  /api/v1/users:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Response-users_UsersResponseType'
      security:
      - Bearer: []
      summary: get list of users
      tags:
      - Users
  /api/v1/users/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Response-users_UserResponseType'
      security:
      - Bearer: []
      summary: get user by id
      tags:
      - Users
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
